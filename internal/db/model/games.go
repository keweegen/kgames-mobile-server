// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Game is an object representing the database table.
type Game struct {
	ID               string          `boil:"id" json:"id" toml:"id" yaml:"id"`
	TypeCode         string          `boil:"type_code" json:"type_code" toml:"type_code" yaml:"type_code"`
	StateCode        string          `boil:"state_code" json:"state_code" toml:"state_code" yaml:"state_code"`
	Bid              decimal.Decimal `boil:"bid" json:"bid" toml:"bid" yaml:"bid"`
	MaxPlayers       int16           `boil:"max_players" json:"max_players" toml:"max_players" yaml:"max_players"`
	FinishReasonCode null.String     `boil:"finish_reason_code" json:"finish_reason_code,omitempty" toml:"finish_reason_code" yaml:"finish_reason_code,omitempty"`
	CreatedAt        time.Time       `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedBy        string          `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	StartedAt        null.Time       `boil:"started_at" json:"started_at,omitempty" toml:"started_at" yaml:"started_at,omitempty"`
	FinishedAt       null.Time       `boil:"finished_at" json:"finished_at,omitempty" toml:"finished_at" yaml:"finished_at,omitempty"`

	R *gameR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gameL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GameColumns = struct {
	ID               string
	TypeCode         string
	StateCode        string
	Bid              string
	MaxPlayers       string
	FinishReasonCode string
	CreatedAt        string
	CreatedBy        string
	StartedAt        string
	FinishedAt       string
}{
	ID:               "id",
	TypeCode:         "type_code",
	StateCode:        "state_code",
	Bid:              "bid",
	MaxPlayers:       "max_players",
	FinishReasonCode: "finish_reason_code",
	CreatedAt:        "created_at",
	CreatedBy:        "created_by",
	StartedAt:        "started_at",
	FinishedAt:       "finished_at",
}

var GameTableColumns = struct {
	ID               string
	TypeCode         string
	StateCode        string
	Bid              string
	MaxPlayers       string
	FinishReasonCode string
	CreatedAt        string
	CreatedBy        string
	StartedAt        string
	FinishedAt       string
}{
	ID:               "games.id",
	TypeCode:         "games.type_code",
	StateCode:        "games.state_code",
	Bid:              "games.bid",
	MaxPlayers:       "games.max_players",
	FinishReasonCode: "games.finish_reason_code",
	CreatedAt:        "games.created_at",
	CreatedBy:        "games.created_by",
	StartedAt:        "games.started_at",
	FinishedAt:       "games.finished_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var GameWhere = struct {
	ID               whereHelperstring
	TypeCode         whereHelperstring
	StateCode        whereHelperstring
	Bid              whereHelperdecimal_Decimal
	MaxPlayers       whereHelperint16
	FinishReasonCode whereHelpernull_String
	CreatedAt        whereHelpertime_Time
	CreatedBy        whereHelperstring
	StartedAt        whereHelpernull_Time
	FinishedAt       whereHelpernull_Time
}{
	ID:               whereHelperstring{field: "\"kgames\".\"games\".\"id\""},
	TypeCode:         whereHelperstring{field: "\"kgames\".\"games\".\"type_code\""},
	StateCode:        whereHelperstring{field: "\"kgames\".\"games\".\"state_code\""},
	Bid:              whereHelperdecimal_Decimal{field: "\"kgames\".\"games\".\"bid\""},
	MaxPlayers:       whereHelperint16{field: "\"kgames\".\"games\".\"max_players\""},
	FinishReasonCode: whereHelpernull_String{field: "\"kgames\".\"games\".\"finish_reason_code\""},
	CreatedAt:        whereHelpertime_Time{field: "\"kgames\".\"games\".\"created_at\""},
	CreatedBy:        whereHelperstring{field: "\"kgames\".\"games\".\"created_by\""},
	StartedAt:        whereHelpernull_Time{field: "\"kgames\".\"games\".\"started_at\""},
	FinishedAt:       whereHelpernull_Time{field: "\"kgames\".\"games\".\"finished_at\""},
}

// GameRels is where relationship names are stored.
var GameRels = struct {
	GameMoves   string
	GamePlayers string
}{
	GameMoves:   "GameMoves",
	GamePlayers: "GamePlayers",
}

// gameR is where relationships are stored.
type gameR struct {
	GameMoves   GameMoveSlice   `boil:"GameMoves" json:"GameMoves" toml:"GameMoves" yaml:"GameMoves"`
	GamePlayers GamePlayerSlice `boil:"GamePlayers" json:"GamePlayers" toml:"GamePlayers" yaml:"GamePlayers"`
}

// NewStruct creates a new relationship struct
func (*gameR) NewStruct() *gameR {
	return &gameR{}
}

func (r *gameR) GetGameMoves() GameMoveSlice {
	if r == nil {
		return nil
	}
	return r.GameMoves
}

func (r *gameR) GetGamePlayers() GamePlayerSlice {
	if r == nil {
		return nil
	}
	return r.GamePlayers
}

// gameL is where Load methods for each relationship are stored.
type gameL struct{}

var (
	gameAllColumns            = []string{"id", "type_code", "state_code", "bid", "max_players", "finish_reason_code", "created_at", "created_by", "started_at", "finished_at"}
	gameColumnsWithoutDefault = []string{"type_code", "state_code", "bid", "max_players", "created_by"}
	gameColumnsWithDefault    = []string{"id", "finish_reason_code", "created_at", "started_at", "finished_at"}
	gamePrimaryKeyColumns     = []string{"id"}
	gameGeneratedColumns      = []string{}
)

type (
	// GameSlice is an alias for a slice of pointers to Game.
	// This should almost always be used instead of []Game.
	GameSlice []*Game
	// GameHook is the signature for custom Game hook methods
	GameHook func(context.Context, boil.ContextExecutor, *Game) error

	gameQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gameType                 = reflect.TypeOf(&Game{})
	gameMapping              = queries.MakeStructMapping(gameType)
	gamePrimaryKeyMapping, _ = queries.BindMapping(gameType, gameMapping, gamePrimaryKeyColumns)
	gameInsertCacheMut       sync.RWMutex
	gameInsertCache          = make(map[string]insertCache)
	gameUpdateCacheMut       sync.RWMutex
	gameUpdateCache          = make(map[string]updateCache)
	gameUpsertCacheMut       sync.RWMutex
	gameUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var gameAfterSelectMu sync.Mutex
var gameAfterSelectHooks []GameHook

var gameBeforeInsertMu sync.Mutex
var gameBeforeInsertHooks []GameHook
var gameAfterInsertMu sync.Mutex
var gameAfterInsertHooks []GameHook

var gameBeforeUpdateMu sync.Mutex
var gameBeforeUpdateHooks []GameHook
var gameAfterUpdateMu sync.Mutex
var gameAfterUpdateHooks []GameHook

var gameBeforeDeleteMu sync.Mutex
var gameBeforeDeleteHooks []GameHook
var gameAfterDeleteMu sync.Mutex
var gameAfterDeleteHooks []GameHook

var gameBeforeUpsertMu sync.Mutex
var gameBeforeUpsertHooks []GameHook
var gameAfterUpsertMu sync.Mutex
var gameAfterUpsertHooks []GameHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Game) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Game) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Game) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Game) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Game) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Game) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Game) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Game) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Game) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGameHook registers your hook function for all future operations.
func AddGameHook(hookPoint boil.HookPoint, gameHook GameHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		gameAfterSelectMu.Lock()
		gameAfterSelectHooks = append(gameAfterSelectHooks, gameHook)
		gameAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		gameBeforeInsertMu.Lock()
		gameBeforeInsertHooks = append(gameBeforeInsertHooks, gameHook)
		gameBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		gameAfterInsertMu.Lock()
		gameAfterInsertHooks = append(gameAfterInsertHooks, gameHook)
		gameAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		gameBeforeUpdateMu.Lock()
		gameBeforeUpdateHooks = append(gameBeforeUpdateHooks, gameHook)
		gameBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		gameAfterUpdateMu.Lock()
		gameAfterUpdateHooks = append(gameAfterUpdateHooks, gameHook)
		gameAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		gameBeforeDeleteMu.Lock()
		gameBeforeDeleteHooks = append(gameBeforeDeleteHooks, gameHook)
		gameBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		gameAfterDeleteMu.Lock()
		gameAfterDeleteHooks = append(gameAfterDeleteHooks, gameHook)
		gameAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		gameBeforeUpsertMu.Lock()
		gameBeforeUpsertHooks = append(gameBeforeUpsertHooks, gameHook)
		gameBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		gameAfterUpsertMu.Lock()
		gameAfterUpsertHooks = append(gameAfterUpsertHooks, gameHook)
		gameAfterUpsertMu.Unlock()
	}
}

// One returns a single game record from the query.
func (q gameQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Game, error) {
	o := &Game{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for games")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Game records from the query.
func (q gameQuery) All(ctx context.Context, exec boil.ContextExecutor) (GameSlice, error) {
	var o []*Game

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Game slice")
	}

	if len(gameAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Game records in the query.
func (q gameQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count games rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gameQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if games exists")
	}

	return count > 0, nil
}

// GameMoves retrieves all the game_move's GameMoves with an executor.
func (o *Game) GameMoves(mods ...qm.QueryMod) gameMoveQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"kgames\".\"game_moves\".\"game_id\"=?", o.ID),
	)

	return GameMoves(queryMods...)
}

// GamePlayers retrieves all the game_player's GamePlayers with an executor.
func (o *Game) GamePlayers(mods ...qm.QueryMod) gamePlayerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"kgames\".\"game_players\".\"game_id\"=?", o.ID),
	)

	return GamePlayers(queryMods...)
}

// LoadGameMoves allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gameL) LoadGameMoves(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGame interface{}, mods queries.Applicator) error {
	var slice []*Game
	var object *Game

	if singular {
		var ok bool
		object, ok = maybeGame.(*Game)
		if !ok {
			object = new(Game)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGame))
			}
		}
	} else {
		s, ok := maybeGame.(*[]*Game)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGame))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`kgames.game_moves`),
		qm.WhereIn(`kgames.game_moves.game_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load game_moves")
	}

	var resultSlice []*GameMove
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice game_moves")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on game_moves")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_moves")
	}

	if len(gameMoveAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GameMoves = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gameMoveR{}
			}
			foreign.R.Game = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GameID {
				local.R.GameMoves = append(local.R.GameMoves, foreign)
				if foreign.R == nil {
					foreign.R = &gameMoveR{}
				}
				foreign.R.Game = local
				break
			}
		}
	}

	return nil
}

// LoadGamePlayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gameL) LoadGamePlayers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGame interface{}, mods queries.Applicator) error {
	var slice []*Game
	var object *Game

	if singular {
		var ok bool
		object, ok = maybeGame.(*Game)
		if !ok {
			object = new(Game)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGame))
			}
		}
	} else {
		s, ok := maybeGame.(*[]*Game)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGame))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`kgames.game_players`),
		qm.WhereIn(`kgames.game_players.game_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load game_players")
	}

	var resultSlice []*GamePlayer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice game_players")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on game_players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_players")
	}

	if len(gamePlayerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GamePlayers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gamePlayerR{}
			}
			foreign.R.Game = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GameID {
				local.R.GamePlayers = append(local.R.GamePlayers, foreign)
				if foreign.R == nil {
					foreign.R = &gamePlayerR{}
				}
				foreign.R.Game = local
				break
			}
		}
	}

	return nil
}

// AddGameMoves adds the given related objects to the existing relationships
// of the game, optionally inserting them as new records.
// Appends related to o.R.GameMoves.
// Sets related.R.Game appropriately.
func (o *Game) AddGameMoves(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GameMove) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GameID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"kgames\".\"game_moves\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"game_id"}),
				strmangle.WhereClause("\"", "\"", 2, gameMovePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GameID = o.ID
		}
	}

	if o.R == nil {
		o.R = &gameR{
			GameMoves: related,
		}
	} else {
		o.R.GameMoves = append(o.R.GameMoves, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gameMoveR{
				Game: o,
			}
		} else {
			rel.R.Game = o
		}
	}
	return nil
}

// AddGamePlayers adds the given related objects to the existing relationships
// of the game, optionally inserting them as new records.
// Appends related to o.R.GamePlayers.
// Sets related.R.Game appropriately.
func (o *Game) AddGamePlayers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GamePlayer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GameID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"kgames\".\"game_players\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"game_id"}),
				strmangle.WhereClause("\"", "\"", 2, gamePlayerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.GameID, rel.PlayerID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GameID = o.ID
		}
	}

	if o.R == nil {
		o.R = &gameR{
			GamePlayers: related,
		}
	} else {
		o.R.GamePlayers = append(o.R.GamePlayers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gamePlayerR{
				Game: o,
			}
		} else {
			rel.R.Game = o
		}
	}
	return nil
}

// Games retrieves all the records using an executor.
func Games(mods ...qm.QueryMod) gameQuery {
	mods = append(mods, qm.From("\"kgames\".\"games\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"kgames\".\"games\".*"})
	}

	return gameQuery{q}
}

// FindGame retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGame(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Game, error) {
	gameObj := &Game{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"kgames\".\"games\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, gameObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from games")
	}

	if err = gameObj.doAfterSelectHooks(ctx, exec); err != nil {
		return gameObj, err
	}

	return gameObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Game) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no games provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gameColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gameInsertCacheMut.RLock()
	cache, cached := gameInsertCache[key]
	gameInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gameAllColumns,
			gameColumnsWithDefault,
			gameColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gameType, gameMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gameType, gameMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"kgames\".\"games\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"kgames\".\"games\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into games")
	}

	if !cached {
		gameInsertCacheMut.Lock()
		gameInsertCache[key] = cache
		gameInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Game.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Game) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	gameUpdateCacheMut.RLock()
	cache, cached := gameUpdateCache[key]
	gameUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gameAllColumns,
			gamePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update games, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"kgames\".\"games\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, gamePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gameType, gameMapping, append(wl, gamePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update games row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for games")
	}

	if !cached {
		gameUpdateCacheMut.Lock()
		gameUpdateCache[key] = cache
		gameUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q gameQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for games")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for games")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GameSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"kgames\".\"games\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, gamePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in game slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all game")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Game) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no games provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gameColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gameUpsertCacheMut.RLock()
	cache, cached := gameUpsertCache[key]
	gameUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			gameAllColumns,
			gameColumnsWithDefault,
			gameColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			gameAllColumns,
			gamePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert games, could not build update column list")
		}

		ret := strmangle.SetComplement(gameAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(gamePrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert games, could not build conflict column list")
			}

			conflict = make([]string, len(gamePrimaryKeyColumns))
			copy(conflict, gamePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"kgames\".\"games\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(gameType, gameMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gameType, gameMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert games")
	}

	if !cached {
		gameUpsertCacheMut.Lock()
		gameUpsertCache[key] = cache
		gameUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Game record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Game) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Game provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gamePrimaryKeyMapping)
	sql := "DELETE FROM \"kgames\".\"games\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from games")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for games")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gameQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no gameQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from games")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for games")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GameSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(gameBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"kgames\".\"games\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gamePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from game slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for games")
	}

	if len(gameAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Game) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGame(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GameSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GameSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"kgames\".\"games\".* FROM \"kgames\".\"games\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gamePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in GameSlice")
	}

	*o = slice

	return nil
}

// GameExists checks if the Game row exists.
func GameExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"kgames\".\"games\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if games exists")
	}

	return exists, nil
}

// Exists checks if the Game row exists.
func (o *Game) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GameExists(ctx, exec, o.ID)
}
