// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// GameMove is an object representing the database table.
type GameMove struct {
	ID        string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	GameID    string     `boil:"game_id" json:"game_id" toml:"game_id" yaml:"game_id"`
	StrikerID string     `boil:"striker_id" json:"striker_id" toml:"striker_id" yaml:"striker_id"`
	BatterID  string     `boil:"batter_id" json:"batter_id" toml:"batter_id" yaml:"batter_id"`
	UnitCode  string     `boil:"unit_code" json:"unit_code" toml:"unit_code" yaml:"unit_code"`
	Position  types.JSON `boil:"position" json:"position" toml:"position" yaml:"position"`
	CreatedAt time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *gameMoveR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gameMoveL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GameMoveColumns = struct {
	ID        string
	GameID    string
	StrikerID string
	BatterID  string
	UnitCode  string
	Position  string
	CreatedAt string
}{
	ID:        "id",
	GameID:    "game_id",
	StrikerID: "striker_id",
	BatterID:  "batter_id",
	UnitCode:  "unit_code",
	Position:  "position",
	CreatedAt: "created_at",
}

var GameMoveTableColumns = struct {
	ID        string
	GameID    string
	StrikerID string
	BatterID  string
	UnitCode  string
	Position  string
	CreatedAt string
}{
	ID:        "game_moves.id",
	GameID:    "game_moves.game_id",
	StrikerID: "game_moves.striker_id",
	BatterID:  "game_moves.batter_id",
	UnitCode:  "game_moves.unit_code",
	Position:  "game_moves.position",
	CreatedAt: "game_moves.created_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var GameMoveWhere = struct {
	ID        whereHelperstring
	GameID    whereHelperstring
	StrikerID whereHelperstring
	BatterID  whereHelperstring
	UnitCode  whereHelperstring
	Position  whereHelpertypes_JSON
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"kgames\".\"game_moves\".\"id\""},
	GameID:    whereHelperstring{field: "\"kgames\".\"game_moves\".\"game_id\""},
	StrikerID: whereHelperstring{field: "\"kgames\".\"game_moves\".\"striker_id\""},
	BatterID:  whereHelperstring{field: "\"kgames\".\"game_moves\".\"batter_id\""},
	UnitCode:  whereHelperstring{field: "\"kgames\".\"game_moves\".\"unit_code\""},
	Position:  whereHelpertypes_JSON{field: "\"kgames\".\"game_moves\".\"position\""},
	CreatedAt: whereHelpertime_Time{field: "\"kgames\".\"game_moves\".\"created_at\""},
}

// GameMoveRels is where relationship names are stored.
var GameMoveRels = struct {
	Batter  string
	Game    string
	Striker string
}{
	Batter:  "Batter",
	Game:    "Game",
	Striker: "Striker",
}

// gameMoveR is where relationships are stored.
type gameMoveR struct {
	Batter  *User `boil:"Batter" json:"Batter" toml:"Batter" yaml:"Batter"`
	Game    *Game `boil:"Game" json:"Game" toml:"Game" yaml:"Game"`
	Striker *User `boil:"Striker" json:"Striker" toml:"Striker" yaml:"Striker"`
}

// NewStruct creates a new relationship struct
func (*gameMoveR) NewStruct() *gameMoveR {
	return &gameMoveR{}
}

func (r *gameMoveR) GetBatter() *User {
	if r == nil {
		return nil
	}
	return r.Batter
}

func (r *gameMoveR) GetGame() *Game {
	if r == nil {
		return nil
	}
	return r.Game
}

func (r *gameMoveR) GetStriker() *User {
	if r == nil {
		return nil
	}
	return r.Striker
}

// gameMoveL is where Load methods for each relationship are stored.
type gameMoveL struct{}

var (
	gameMoveAllColumns            = []string{"id", "game_id", "striker_id", "batter_id", "unit_code", "position", "created_at"}
	gameMoveColumnsWithoutDefault = []string{"game_id", "striker_id", "batter_id", "unit_code"}
	gameMoveColumnsWithDefault    = []string{"id", "position", "created_at"}
	gameMovePrimaryKeyColumns     = []string{"id"}
	gameMoveGeneratedColumns      = []string{}
)

type (
	// GameMoveSlice is an alias for a slice of pointers to GameMove.
	// This should almost always be used instead of []GameMove.
	GameMoveSlice []*GameMove
	// GameMoveHook is the signature for custom GameMove hook methods
	GameMoveHook func(context.Context, boil.ContextExecutor, *GameMove) error

	gameMoveQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gameMoveType                 = reflect.TypeOf(&GameMove{})
	gameMoveMapping              = queries.MakeStructMapping(gameMoveType)
	gameMovePrimaryKeyMapping, _ = queries.BindMapping(gameMoveType, gameMoveMapping, gameMovePrimaryKeyColumns)
	gameMoveInsertCacheMut       sync.RWMutex
	gameMoveInsertCache          = make(map[string]insertCache)
	gameMoveUpdateCacheMut       sync.RWMutex
	gameMoveUpdateCache          = make(map[string]updateCache)
	gameMoveUpsertCacheMut       sync.RWMutex
	gameMoveUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var gameMoveAfterSelectMu sync.Mutex
var gameMoveAfterSelectHooks []GameMoveHook

var gameMoveBeforeInsertMu sync.Mutex
var gameMoveBeforeInsertHooks []GameMoveHook
var gameMoveAfterInsertMu sync.Mutex
var gameMoveAfterInsertHooks []GameMoveHook

var gameMoveBeforeUpdateMu sync.Mutex
var gameMoveBeforeUpdateHooks []GameMoveHook
var gameMoveAfterUpdateMu sync.Mutex
var gameMoveAfterUpdateHooks []GameMoveHook

var gameMoveBeforeDeleteMu sync.Mutex
var gameMoveBeforeDeleteHooks []GameMoveHook
var gameMoveAfterDeleteMu sync.Mutex
var gameMoveAfterDeleteHooks []GameMoveHook

var gameMoveBeforeUpsertMu sync.Mutex
var gameMoveBeforeUpsertHooks []GameMoveHook
var gameMoveAfterUpsertMu sync.Mutex
var gameMoveAfterUpsertHooks []GameMoveHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GameMove) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMoveAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GameMove) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMoveBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GameMove) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMoveAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GameMove) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMoveBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GameMove) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMoveAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GameMove) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMoveBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GameMove) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMoveAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GameMove) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMoveBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GameMove) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameMoveAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGameMoveHook registers your hook function for all future operations.
func AddGameMoveHook(hookPoint boil.HookPoint, gameMoveHook GameMoveHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		gameMoveAfterSelectMu.Lock()
		gameMoveAfterSelectHooks = append(gameMoveAfterSelectHooks, gameMoveHook)
		gameMoveAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		gameMoveBeforeInsertMu.Lock()
		gameMoveBeforeInsertHooks = append(gameMoveBeforeInsertHooks, gameMoveHook)
		gameMoveBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		gameMoveAfterInsertMu.Lock()
		gameMoveAfterInsertHooks = append(gameMoveAfterInsertHooks, gameMoveHook)
		gameMoveAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		gameMoveBeforeUpdateMu.Lock()
		gameMoveBeforeUpdateHooks = append(gameMoveBeforeUpdateHooks, gameMoveHook)
		gameMoveBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		gameMoveAfterUpdateMu.Lock()
		gameMoveAfterUpdateHooks = append(gameMoveAfterUpdateHooks, gameMoveHook)
		gameMoveAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		gameMoveBeforeDeleteMu.Lock()
		gameMoveBeforeDeleteHooks = append(gameMoveBeforeDeleteHooks, gameMoveHook)
		gameMoveBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		gameMoveAfterDeleteMu.Lock()
		gameMoveAfterDeleteHooks = append(gameMoveAfterDeleteHooks, gameMoveHook)
		gameMoveAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		gameMoveBeforeUpsertMu.Lock()
		gameMoveBeforeUpsertHooks = append(gameMoveBeforeUpsertHooks, gameMoveHook)
		gameMoveBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		gameMoveAfterUpsertMu.Lock()
		gameMoveAfterUpsertHooks = append(gameMoveAfterUpsertHooks, gameMoveHook)
		gameMoveAfterUpsertMu.Unlock()
	}
}

// One returns a single gameMove record from the query.
func (q gameMoveQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GameMove, error) {
	o := &GameMove{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for game_moves")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GameMove records from the query.
func (q gameMoveQuery) All(ctx context.Context, exec boil.ContextExecutor) (GameMoveSlice, error) {
	var o []*GameMove

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to GameMove slice")
	}

	if len(gameMoveAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GameMove records in the query.
func (q gameMoveQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count game_moves rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gameMoveQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if game_moves exists")
	}

	return count > 0, nil
}

// Batter pointed to by the foreign key.
func (o *GameMove) Batter(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BatterID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Game pointed to by the foreign key.
func (o *GameMove) Game(mods ...qm.QueryMod) gameQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GameID),
	}

	queryMods = append(queryMods, mods...)

	return Games(queryMods...)
}

// Striker pointed to by the foreign key.
func (o *GameMove) Striker(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StrikerID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadBatter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gameMoveL) LoadBatter(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGameMove interface{}, mods queries.Applicator) error {
	var slice []*GameMove
	var object *GameMove

	if singular {
		var ok bool
		object, ok = maybeGameMove.(*GameMove)
		if !ok {
			object = new(GameMove)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGameMove)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGameMove))
			}
		}
	} else {
		s, ok := maybeGameMove.(*[]*GameMove)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGameMove)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGameMove))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameMoveR{}
		}
		args[object.BatterID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameMoveR{}
			}

			args[obj.BatterID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`kgames.users`),
		qm.WhereIn(`kgames.users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Batter = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.BatterGameMoves = append(foreign.R.BatterGameMoves, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BatterID == foreign.ID {
				local.R.Batter = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.BatterGameMoves = append(foreign.R.BatterGameMoves, local)
				break
			}
		}
	}

	return nil
}

// LoadGame allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gameMoveL) LoadGame(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGameMove interface{}, mods queries.Applicator) error {
	var slice []*GameMove
	var object *GameMove

	if singular {
		var ok bool
		object, ok = maybeGameMove.(*GameMove)
		if !ok {
			object = new(GameMove)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGameMove)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGameMove))
			}
		}
	} else {
		s, ok := maybeGameMove.(*[]*GameMove)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGameMove)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGameMove))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameMoveR{}
		}
		args[object.GameID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameMoveR{}
			}

			args[obj.GameID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`kgames.games`),
		qm.WhereIn(`kgames.games.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Game")
	}

	var resultSlice []*Game
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Game")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for games")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for games")
	}

	if len(gameAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Game = foreign
		if foreign.R == nil {
			foreign.R = &gameR{}
		}
		foreign.R.GameMoves = append(foreign.R.GameMoves, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GameID == foreign.ID {
				local.R.Game = foreign
				if foreign.R == nil {
					foreign.R = &gameR{}
				}
				foreign.R.GameMoves = append(foreign.R.GameMoves, local)
				break
			}
		}
	}

	return nil
}

// LoadStriker allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gameMoveL) LoadStriker(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGameMove interface{}, mods queries.Applicator) error {
	var slice []*GameMove
	var object *GameMove

	if singular {
		var ok bool
		object, ok = maybeGameMove.(*GameMove)
		if !ok {
			object = new(GameMove)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGameMove)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGameMove))
			}
		}
	} else {
		s, ok := maybeGameMove.(*[]*GameMove)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGameMove)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGameMove))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameMoveR{}
		}
		args[object.StrikerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameMoveR{}
			}

			args[obj.StrikerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`kgames.users`),
		qm.WhereIn(`kgames.users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Striker = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.StrikerGameMoves = append(foreign.R.StrikerGameMoves, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StrikerID == foreign.ID {
				local.R.Striker = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.StrikerGameMoves = append(foreign.R.StrikerGameMoves, local)
				break
			}
		}
	}

	return nil
}

// SetBatter of the gameMove to the related item.
// Sets o.R.Batter to related.
// Adds o to related.R.BatterGameMoves.
func (o *GameMove) SetBatter(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"kgames\".\"game_moves\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"batter_id"}),
		strmangle.WhereClause("\"", "\"", 2, gameMovePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BatterID = related.ID
	if o.R == nil {
		o.R = &gameMoveR{
			Batter: related,
		}
	} else {
		o.R.Batter = related
	}

	if related.R == nil {
		related.R = &userR{
			BatterGameMoves: GameMoveSlice{o},
		}
	} else {
		related.R.BatterGameMoves = append(related.R.BatterGameMoves, o)
	}

	return nil
}

// SetGame of the gameMove to the related item.
// Sets o.R.Game to related.
// Adds o to related.R.GameMoves.
func (o *GameMove) SetGame(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Game) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"kgames\".\"game_moves\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"game_id"}),
		strmangle.WhereClause("\"", "\"", 2, gameMovePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GameID = related.ID
	if o.R == nil {
		o.R = &gameMoveR{
			Game: related,
		}
	} else {
		o.R.Game = related
	}

	if related.R == nil {
		related.R = &gameR{
			GameMoves: GameMoveSlice{o},
		}
	} else {
		related.R.GameMoves = append(related.R.GameMoves, o)
	}

	return nil
}

// SetStriker of the gameMove to the related item.
// Sets o.R.Striker to related.
// Adds o to related.R.StrikerGameMoves.
func (o *GameMove) SetStriker(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"kgames\".\"game_moves\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"striker_id"}),
		strmangle.WhereClause("\"", "\"", 2, gameMovePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StrikerID = related.ID
	if o.R == nil {
		o.R = &gameMoveR{
			Striker: related,
		}
	} else {
		o.R.Striker = related
	}

	if related.R == nil {
		related.R = &userR{
			StrikerGameMoves: GameMoveSlice{o},
		}
	} else {
		related.R.StrikerGameMoves = append(related.R.StrikerGameMoves, o)
	}

	return nil
}

// GameMoves retrieves all the records using an executor.
func GameMoves(mods ...qm.QueryMod) gameMoveQuery {
	mods = append(mods, qm.From("\"kgames\".\"game_moves\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"kgames\".\"game_moves\".*"})
	}

	return gameMoveQuery{q}
}

// FindGameMove retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGameMove(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*GameMove, error) {
	gameMoveObj := &GameMove{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"kgames\".\"game_moves\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, gameMoveObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from game_moves")
	}

	if err = gameMoveObj.doAfterSelectHooks(ctx, exec); err != nil {
		return gameMoveObj, err
	}

	return gameMoveObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GameMove) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no game_moves provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gameMoveColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gameMoveInsertCacheMut.RLock()
	cache, cached := gameMoveInsertCache[key]
	gameMoveInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gameMoveAllColumns,
			gameMoveColumnsWithDefault,
			gameMoveColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gameMoveType, gameMoveMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gameMoveType, gameMoveMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"kgames\".\"game_moves\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"kgames\".\"game_moves\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into game_moves")
	}

	if !cached {
		gameMoveInsertCacheMut.Lock()
		gameMoveInsertCache[key] = cache
		gameMoveInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GameMove.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GameMove) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	gameMoveUpdateCacheMut.RLock()
	cache, cached := gameMoveUpdateCache[key]
	gameMoveUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gameMoveAllColumns,
			gameMovePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update game_moves, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"kgames\".\"game_moves\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, gameMovePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gameMoveType, gameMoveMapping, append(wl, gameMovePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update game_moves row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for game_moves")
	}

	if !cached {
		gameMoveUpdateCacheMut.Lock()
		gameMoveUpdateCache[key] = cache
		gameMoveUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q gameMoveQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for game_moves")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for game_moves")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GameMoveSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gameMovePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"kgames\".\"game_moves\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, gameMovePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in gameMove slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all gameMove")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GameMove) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no game_moves provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gameMoveColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gameMoveUpsertCacheMut.RLock()
	cache, cached := gameMoveUpsertCache[key]
	gameMoveUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			gameMoveAllColumns,
			gameMoveColumnsWithDefault,
			gameMoveColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			gameMoveAllColumns,
			gameMovePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert game_moves, could not build update column list")
		}

		ret := strmangle.SetComplement(gameMoveAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(gameMovePrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert game_moves, could not build conflict column list")
			}

			conflict = make([]string, len(gameMovePrimaryKeyColumns))
			copy(conflict, gameMovePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"kgames\".\"game_moves\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(gameMoveType, gameMoveMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gameMoveType, gameMoveMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert game_moves")
	}

	if !cached {
		gameMoveUpsertCacheMut.Lock()
		gameMoveUpsertCache[key] = cache
		gameMoveUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GameMove record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GameMove) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no GameMove provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gameMovePrimaryKeyMapping)
	sql := "DELETE FROM \"kgames\".\"game_moves\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from game_moves")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for game_moves")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gameMoveQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no gameMoveQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from game_moves")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for game_moves")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GameMoveSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(gameMoveBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gameMovePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"kgames\".\"game_moves\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gameMovePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from gameMove slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for game_moves")
	}

	if len(gameMoveAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GameMove) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGameMove(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GameMoveSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GameMoveSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gameMovePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"kgames\".\"game_moves\".* FROM \"kgames\".\"game_moves\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gameMovePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in GameMoveSlice")
	}

	*o = slice

	return nil
}

// GameMoveExists checks if the GameMove row exists.
func GameMoveExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"kgames\".\"game_moves\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if game_moves exists")
	}

	return exists, nil
}

// Exists checks if the GameMove row exists.
func (o *GameMove) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GameMoveExists(ctx, exec, o.ID)
}
